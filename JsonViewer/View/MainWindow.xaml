<Window
    x:Class="JsonViewer.View.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:JsonViewer.View"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:JsonViewer.Model"
    x:Name="mainWindow"
    Title="Json Viewer"
    Width="1200"
    Height="750"
    DataContext="{Binding RelativeSource={RelativeSource Self}}"
    Loaded="OnLoaded"
    mc:Ignorable="d">
    <Window.Resources>
        <HierarchicalDataTemplate
            x:Key="TreeViewItemTemplate"
            DataType="local:TreeViewData"
            ItemsSource="{Binding Path=Children}">
            <Grid HorizontalAlignment="Stretch" Background="{Binding Path=BackgroundColor}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem
                            Command="{Binding Path=ExpandChildrenCommand}"
                            Header="{Binding Path=ExpandChildrenCommand.Text}"
                            IsEnabled="{Binding Path=ExpandChildrenCommand.IsEnabled}"
                            Visibility="{Binding Path=ExpandChildrenCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=ExpandAllCommand}"
                            Header="{Binding Path=ExpandAllCommand.Text}"
                            IsEnabled="{Binding Path=ExpandAllCommand.IsEnabled}"
                            Visibility="{Binding Path=ExpandAllCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=CollapseAllCommand}"
                            Header="{Binding Path=CollapseAllCommand.Text}"
                            IsEnabled="{Binding Path=CollapseAllCommand.IsEnabled}"
                            Visibility="{Binding Path=CollapseAllCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=CopyKeyCommand}"
                            Header="{Binding Path=CopyKeyCommand.Text}"
                            IsEnabled="{Binding Path=CopyKeyCommand.IsEnabled}"
                            Visibility="{Binding Path=CopyKeyCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=CopyValueCommand}"
                            Header="{Binding Path=CopyValueCommand.Text}"
                            IsEnabled="{Binding Path=CopyValueCommand.IsEnabled}"
                            Visibility="{Binding Path=CopyValueCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=CopyPrettyValueCommand}"
                            Header="{Binding Path=CopyPrettyValueCommand.Text}"
                            IsEnabled="{Binding Path=CopyPrettyValueCommand.IsEnabled}"
                            Visibility="{Binding Path=CopyPrettyValueCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=CopyEscapedValueCommand}"
                            Header="{Binding Path=CopyEscapedValueCommand.Text}"
                            IsEnabled="{Binding Path=CopyEscapedValueCommand.IsEnabled}"
                            Visibility="{Binding Path=CopyEscapedValueCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=TreatAsJsonCommand}"
                            Header="{Binding Path=TreatAsJsonCommand.Text}"
                            Visibility="{Binding Path=TreatAsJsonCommand.IsVisible}" />
                        <MenuItem
                            Command="{Binding Path=TreatAsTextCommand}"
                            Header="{Binding Path=TreatAsTextCommand.Text}"
                            Visibility="{Binding Path=TreatAsTextCommand.IsVisible}" />
                    </ContextMenu>
                </Grid.ContextMenu>
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <TextBlock
                        x:Name="KeyBlock"
                        FontSize="{Binding Path=FontSize}"
                        FontWeight="Bold"
                        Foreground="{Binding Path=TextColor}"
                        Text="{Binding Path=KeyName}" />
                    <TextBlock
                        FontSize="{Binding Path=FontSize}"
                        FontWeight="Bold"
                        Foreground="{Binding Path=TextColor}"
                        Text=" : " />
                </StackPanel>
                <TextBlock
                    x:Name="OneLineValueBlock"
                    Grid.Column="1"
                    Padding="5,0"
                    FontSize="{Binding Path=FontSize}"
                    Foreground="{Binding Path=TextColor}"
                    Text="{Binding Path=OneLineValue}"
                    TextWrapping="Wrap" />
                <TextBlock
                    x:Name="ValueTypeBlock"
                    Grid.Column="3"
                    FontSize="{Binding Path=FontSize}"
                    Foreground="{Binding Path=TextColor}"
                    Text="{Binding Path=ValueType}" />
            </Grid>
        </HierarchicalDataTemplate>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Find" Executed="CommandBinding_Find" />
    </Window.CommandBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Command="{Binding ElementName=Toolbar, Path=OpenJsonFileCommand.RoutedUICommand}" Header="_Open Json file..." />
                <Separator />
                <MenuItem Command="{Binding ElementName=Toolbar, Path=PickConfigCommand.RoutedUICommand}" Header="_Load config file..." />
                <MenuItem Command="{Binding ElementName=Toolbar, Path=ReloadCommand.RoutedUICommand}" Header="_Reload current config" />
                <Separator />
                <MenuItem Click="CheckForUpdates" Header="Check for _updates" />
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Command="{Binding ElementName=Toolbar, Path=PrettyCopyAllCommand.RoutedUICommand}" Header="{Binding ElementName=Toolbar, Path=PrettyCopyAllCommand.Text}" />
                <MenuItem Command="{Binding ElementName=Toolbar, Path=PasteCommand.RoutedUICommand}" Header="{Binding ElementName=Toolbar, Path=PasteCommand.Text}" />
                <Separator />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=AutoPasteToggleCommand.RoutedUICommand}"
                    Header="{Binding ElementName=Toolbar, Path=AutoPasteToggleCommand.Text}"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=AutoPasteToggleCommand.IsChecked, Mode=OneWay}" />
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Command="{Binding ElementName=Toolbar, Path=ShowTextModeCommand.RoutedUICommand}" Header="{Binding ElementName=Toolbar, Path=ShowTextModeCommand.Text}" />
                <MenuItem Command="{Binding ElementName=Toolbar, Path=ShowTreeModeCommand.RoutedUICommand}" Header="{Binding ElementName=Toolbar, Path=ShowTreeModeCommand.Text}" />
                <MenuItem Command="{Binding ElementName=Toolbar, Path=ShowRulesModeCommand.RoutedUICommand}" Header="{Binding ElementName=Toolbar, Path=ShowRulesModeCommand.Text}" />
                <Separator />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=ShowToolbarTextToggleCommand}"
                    Header="Show toolbar _text"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=ShowToolbarTextToggleCommand.IsChecked, Mode=OneWay}" />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=ShowToolbarIconToggleCommand}"
                    Header="Show toolbar _icons"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=ShowToolbarIconToggleCommand.IsChecked, Mode=OneWay}" />
                <Separator />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=HighlightParentsToggleCommand.RoutedUICommand}"
                    Header="Highlight parents"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=HighlightParentsToggleCommand.IsChecked, Mode=OneWay}" />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=HighlightSimilarKeysToggleCommand.RoutedUICommand}"
                    Header="Highlight similar keys"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=HighlightSimilarKeysToggleCommand.IsChecked, Mode=OneWay}" />
                <MenuItem
                    Command="{Binding ElementName=Toolbar, Path=HighlightSimilarValuesToggleCommand.RoutedUICommand}"
                    Header="Highlight similar values"
                    IsCheckable="True"
                    IsChecked="{Binding ElementName=Toolbar, Path=HighlightSimilarValuesToggleCommand.IsChecked, Mode=OneWay}" />
            </MenuItem>
            <MenuItem Header="Windows">
                <MenuItem Command="{Binding ElementName=Toolbar, Path=NewWindowCommand.RoutedUICommand}" Header="_New window" />
                <Separator />
                <MenuItem Command="ApplicationCommands.Find" Header="_Find window" />
            </MenuItem>
            <MenuItem x:Name="ExpandToMenuItem" Header="_Expand to" />
        </Menu>
        <local:MainWindowToolbar
            x:Name="Toolbar"
            DataContext="{Binding ElementName=mainWindow}"
            DockPanel.Dock="Top" />
        <TextBlock
            x:Name="ErrorBanner"
            Margin="5"
            Background="Pink"
            DockPanel.Dock="Top"
            Visibility="Collapsed" />
        <Grid
            x:Name="WarningBanner"
            Margin="5"
            Background="Yellow"
            DockPanel.Dock="Top"
            Visibility="Collapsed">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <TextBlock
                Grid.Column="0"
                Padding="5"
                HorizontalAlignment="Left">
                <Hyperlink
                    x:Name="WarningBannerActionLink"
                    Click="OnWarningBannerAction"
                    Foreground="Black"
                    TextDecorations="None" />
            </TextBlock>
            <TextBlock Grid.Column="1" Padding="5">
                <Hyperlink
                    Click="OnWarningBannerDismiss"
                    Foreground="Black"
                    TextDecorations="None">
                    <Run>x</Run>
                </Hyperlink>
            </TextBlock>
        </Grid>
        <local:StatusBar DataContext="{Binding ElementName=mainWindow}" DockPanel.Dock="Bottom" />
        <Grid>
            <Grid.Resources>
                <ObjectDataProvider
                    x:Key="odpMatchType"
                    MethodName="GetValues"
                    ObjectType="{x:Type model:MatchTypeEnum}">
                    <ObjectDataProvider.MethodParameters>
                        <x:Type Type="model:MatchTypeEnum" />
                    </ObjectDataProvider.MethodParameters>
                </ObjectDataProvider>
                <ObjectDataProvider
                    x:Key="odpMatchField"
                    MethodName="GetValues"
                    ObjectType="{x:Type model:MatchFieldEnum}">
                    <ObjectDataProvider.MethodParameters>
                        <x:Type Type="model:MatchFieldEnum" />
                    </ObjectDataProvider.MethodParameters>
                </ObjectDataProvider>
                <DataTemplate x:Key="ColorCellTemplate">
                    <TextBlock
                        Background="{Binding Path=Background}"
                        FontSize="{Binding Path=FontSize}"
                        Foreground="{Binding Path=Foreground}"
                        Text="{Binding Path=ColorString}" />
                </DataTemplate>
                <DataTemplate x:Key="ColorCellEditingTemplate">
                    <StackPanel Background="White" Orientation="Horizontal">
                        <Button
                            Margin="5,0"
                            Background="Transparent"
                            Click="OnSetForegroundButtonClicked"
                            Content="{Binding Path=SetForegroundText}"
                            FontSize="16"
                            Foreground="{Binding Path=Foreground}" />
                        <Button
                            Margin="5,0"
                            Background="Transparent"
                            Click="OnSetBackgroundButtonClicked"
                            Content="{Binding Path=SetBackgroundText}"
                            FontSize="16"
                            Foreground="{Binding Path=BackgroundOrDefaultForeground}" />
                    </StackPanel>
                </DataTemplate>
            </Grid.Resources>
            <DataGrid
                x:Name="RulesList"
                AutoGenerateColumns="False"
                CanUserAddRows="True"
                CanUserDeleteRows="True"
                CanUserReorderColumns="False"
                InitializingNewItem="RulesList_InitializingNewItem"
                ItemsSource="{Binding Path=Rules, Mode=TwoWay}"
                SelectionMode="Single"
                SelectionUnit="FullRow">
                <DataGrid.Columns>
                    <DataGridTextColumn
                        Binding="{Binding Path=Index}"
                        Header="Order"
                        IsReadOnly="True" />
                    <!--  how matches are made  -->
                    <DataGridTextColumn Binding="{Binding Path=MatchString}" Header="Match string" />
                    <DataGridComboBoxColumn
                        Header="Match type"
                        ItemsSource="{Binding Source={StaticResource odpMatchType}}"
                        SelectedItemBinding="{Binding Path=MatchType}" />
                    <DataGridComboBoxColumn
                        Header="Match field"
                        ItemsSource="{Binding Source={StaticResource odpMatchField}}"
                        SelectedItemBinding="{Binding Path=MatchField}" />
                    <DataGridCheckBoxColumn Binding="{Binding Path=IgnoreCase}" Header="Ignore Case" />
                    <DataGridCheckBoxColumn Binding="{Binding Path=AppliesToParents}" Header="Applies to parents" />

                    <!--  what happens when a match is made  -->
                    <DataGridTemplateColumn
                        CellEditingTemplate="{StaticResource ColorCellEditingTemplate}"
                        CellTemplate="{StaticResource ColorCellTemplate}"
                        Header="Color" />
                    <DataGridTextColumn Binding="{Binding Path=FontSize}" Header="Font size" />
                    <DataGridTextColumn Binding="{Binding Path=ExpandChildren}" Header="Expand children" />
                    <DataGridTextColumn Binding="{Binding Path=WarningMessage}" Header="Warning message" />
                </DataGrid.Columns>
            </DataGrid>
            <TextBox
                x:Name="Raw_TextBox"
                AcceptsReturn="True"
                AcceptsTab="False"
                AutoWordSelection="True"
                HorizontalScrollBarVisibility="Auto"
                TextChanged="Raw_TextBox_TextChanged"
                VerticalScrollBarVisibility="Auto"
                Visibility="Collapsed">
                <TextBox.Style>
                    <Style xmlns:sys="clr-namespace:System;assembly=mscorlib" TargetType="TextBox">
                        <Style.Resources>
                            <VisualBrush
                                x:Key="CueBannerBrush"
                                AlignmentX="Left"
                                AlignmentY="Top"
                                Stretch="None">
                                <VisualBrush.Visual>
                                    <Label Content="Enter JSON here" Foreground="DarkGray" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
            <local:CustomTreeView
                x:Name="Tree"
                HorizontalAlignment="Stretch"
                HorizontalContentAlignment="Stretch"
                ItemTemplate="{StaticResource TreeViewItemTemplate}"
                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                Visibility="Collapsed">
                <local:CustomTreeView.InputBindings>
                    <KeyBinding
                        Key="Left"
                        Modifiers="Ctrl"
                        Command="{Binding ElementName=Toolbar, Path=FindPreviousCommand}" />
                    <KeyBinding
                        Key="Right"
                        Modifiers="Ctrl"
                        Command="{Binding ElementName=Toolbar, Path=FindNextCommand}" />
                    <KeyBinding
                        Key="Left"
                        Modifiers="Alt"
                        Command="{Binding ElementName=Toolbar, Path=FindPreviousCommand}" />
                    <KeyBinding
                        Key="Right"
                        Modifiers="Alt"
                        Command="{Binding ElementName=Toolbar, Path=FindNextCommand}" />
                </local:CustomTreeView.InputBindings>
            </local:CustomTreeView>
        </Grid>
    </DockPanel>
</Window>
